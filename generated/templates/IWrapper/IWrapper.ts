// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get wrappedAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FlashBurn extends ethereum.Event {
  get params(): FlashBurn__Params {
    return new FlashBurn__Params(this);
  }
}

export class FlashBurn__Params {
  _event: FlashBurn;

  constructor(event: FlashBurn) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get wrappedAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FlashMint extends ethereum.Event {
  get params(): FlashMint__Params {
    return new FlashMint__Params(this);
  }
}

export class FlashMint__Params {
  _event: FlashMint;

  constructor(event: FlashMint) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get wrappedAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdrawal extends ethereum.Event {
  get params(): Withdrawal__Params {
    return new Withdrawal__Params(this);
  }
}

export class Withdrawal__Params {
  _event: Withdrawal;

  constructor(event: Withdrawal) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get wrappedAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class IWrapper__getStatusResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class IWrapper__subAccountPositionsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }
}

export class IWrapper extends ethereum.SmartContract {
  static bind(address: Address): IWrapper {
    return new IWrapper("IWrapper", address);
  }

  allowance(_owner: Address, _spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_owner), ethereum.Value.fromAddress(_spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    _owner: Address,
    _spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_owner), ethereum.Value.fromAddress(_spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(_spender: Address, _value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(_spender: Address, _value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(_owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  flashFee(token: Address, amount: BigInt): BigInt {
    let result = super.call("flashFee", "flashFee(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(token),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_flashFee(token: Address, amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "flashFee",
      "flashFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  flashLoan(
    receiver: Address,
    token: Address,
    amount: BigInt,
    data: Bytes
  ): boolean {
    let result = super.call(
      "flashLoan",
      "flashLoan(address,address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBoolean();
  }

  try_flashLoan(
    receiver: Address,
    token: Address,
    amount: BigInt,
    data: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "flashLoan",
      "flashLoan(address,address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxFlashLoan(token: Address): BigInt {
    let result = super.call("maxFlashLoan", "maxFlashLoan(address):(uint256)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBigInt();
  }

  try_maxFlashLoan(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxFlashLoan",
      "maxFlashLoan(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(_to: Address, _value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(_to: Address, _value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(_from: Address, _to: Address, _value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    _from: Address,
    _to: Address,
    _value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  underlyingAssetAddress(): Address {
    let result = super.call(
      "underlyingAssetAddress",
      "underlyingAssetAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_underlyingAssetAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "underlyingAssetAddress",
      "underlyingAssetAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  underlyingIsStatic(): boolean {
    let result = super.call(
      "underlyingIsStatic",
      "underlyingIsStatic():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_underlyingIsStatic(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "underlyingIsStatic",
      "underlyingIsStatic():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  infoOracleAddress(): Address {
    let result = super.call(
      "infoOracleAddress",
      "infoOracleAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_infoOracleAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "infoOracleAddress",
      "infoOracleAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  depositUnitAmount(_to: Address, _amount: BigInt): BigInt {
    let result = super.call(
      "depositUnitAmount",
      "depositUnitAmount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_depositUnitAmount(
    _to: Address,
    _amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositUnitAmount",
      "depositUnitAmount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositWrappedAmount(_to: Address, _amount: BigInt): BigInt {
    let result = super.call(
      "depositWrappedAmount",
      "depositWrappedAmount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_depositWrappedAmount(
    _to: Address,
    _amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositWrappedAmount",
      "depositWrappedAmount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawUnitAmount(
    _to: Address,
    _amount: BigInt,
    _claimRewards: boolean
  ): BigInt {
    let result = super.call(
      "withdrawUnitAmount",
      "withdrawUnitAmount(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromBoolean(_claimRewards)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawUnitAmount(
    _to: Address,
    _amount: BigInt,
    _claimRewards: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawUnitAmount",
      "withdrawUnitAmount(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromBoolean(_claimRewards)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawWrappedAmount(
    _to: Address,
    _amount: BigInt,
    _claimRewards: boolean
  ): BigInt {
    let result = super.call(
      "withdrawWrappedAmount",
      "withdrawWrappedAmount(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromBoolean(_claimRewards)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawWrappedAmount(
    _to: Address,
    _amount: BigInt,
    _claimRewards: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawWrappedAmount",
      "withdrawWrappedAmount(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromBoolean(_claimRewards)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastUpdate(): BigInt {
    let result = super.call("lastUpdate", "lastUpdate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastUpdate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastUpdate", "lastUpdate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  UnitAmtToWrappedAmt_RoundDown(_unitAmount: BigInt): BigInt {
    let result = super.call(
      "UnitAmtToWrappedAmt_RoundDown",
      "UnitAmtToWrappedAmt_RoundDown(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_unitAmount)]
    );

    return result[0].toBigInt();
  }

  try_UnitAmtToWrappedAmt_RoundDown(
    _unitAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "UnitAmtToWrappedAmt_RoundDown",
      "UnitAmtToWrappedAmt_RoundDown(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_unitAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  UnitAmtToWrappedAmt_RoundUp(_unitAmount: BigInt): BigInt {
    let result = super.call(
      "UnitAmtToWrappedAmt_RoundUp",
      "UnitAmtToWrappedAmt_RoundUp(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_unitAmount)]
    );

    return result[0].toBigInt();
  }

  try_UnitAmtToWrappedAmt_RoundUp(
    _unitAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "UnitAmtToWrappedAmt_RoundUp",
      "UnitAmtToWrappedAmt_RoundUp(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_unitAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  WrappedAmtToUnitAmt_RoundDown(_amountWrapped: BigInt): BigInt {
    let result = super.call(
      "WrappedAmtToUnitAmt_RoundDown",
      "WrappedAmtToUnitAmt_RoundDown(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amountWrapped)]
    );

    return result[0].toBigInt();
  }

  try_WrappedAmtToUnitAmt_RoundDown(
    _amountWrapped: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "WrappedAmtToUnitAmt_RoundDown",
      "WrappedAmtToUnitAmt_RoundDown(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amountWrapped)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  WrappedAmtToUnitAmt_RoundUp(_amountWrapped: BigInt): BigInt {
    let result = super.call(
      "WrappedAmtToUnitAmt_RoundUp",
      "WrappedAmtToUnitAmt_RoundUp(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amountWrapped)]
    );

    return result[0].toBigInt();
  }

  try_WrappedAmtToUnitAmt_RoundUp(
    _amountWrapped: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "WrappedAmtToUnitAmt_RoundUp",
      "WrappedAmtToUnitAmt_RoundUp(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amountWrapped)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStatus(): IWrapper__getStatusResult {
    let result = super.call("getStatus", "getStatus():(uint256,uint256)", []);

    return new IWrapper__getStatusResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getStatus(): ethereum.CallResult<IWrapper__getStatusResult> {
    let result = super.tryCall(
      "getStatus",
      "getStatus():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IWrapper__getStatusResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  flashLoanFee(): BigInt {
    let result = super.call("flashLoanFee", "flashLoanFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_flashLoanFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("flashLoanFee", "flashLoanFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numRewardsAssets(): BigInt {
    let result = super.call(
      "numRewardsAssets",
      "numRewardsAssets():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_numRewardsAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numRewardsAssets",
      "numRewardsAssets():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardsAssets(_index: BigInt): Address {
    let result = super.call(
      "rewardsAssets",
      "rewardsAssets(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );

    return result[0].toAddress();
  }

  try_rewardsAssets(_index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardsAssets",
      "rewardsAssets(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  immutableRewardsAssets(_index: BigInt): Address {
    let result = super.call(
      "immutableRewardsAssets",
      "immutableRewardsAssets(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );

    return result[0].toAddress();
  }

  try_immutableRewardsAssets(_index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "immutableRewardsAssets",
      "immutableRewardsAssets(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  prevContractBalance(_index: BigInt): BigInt {
    let result = super.call(
      "prevContractBalance",
      "prevContractBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );

    return result[0].toBigInt();
  }

  try_prevContractBalance(_index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "prevContractBalance",
      "prevContractBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRewardsPerWasset(_index: BigInt): BigInt {
    let result = super.call(
      "totalRewardsPerWasset",
      "totalRewardsPerWasset(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );

    return result[0].toBigInt();
  }

  try_totalRewardsPerWasset(_index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalRewardsPerWasset",
      "totalRewardsPerWasset(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRewardsPerWassetUponActivation(_index: BigInt): BigInt {
    let result = super.call(
      "totalRewardsPerWassetUponActivation",
      "totalRewardsPerWassetUponActivation(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );

    return result[0].toBigInt();
  }

  try_totalRewardsPerWassetUponActivation(
    _index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalRewardsPerWassetUponActivation",
      "totalRewardsPerWassetUponActivation(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  prevTotalRewardsPerWasset(_index: BigInt, _wassetHolder: Address): BigInt {
    let result = super.call(
      "prevTotalRewardsPerWasset",
      "prevTotalRewardsPerWasset(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_index),
        ethereum.Value.fromAddress(_wassetHolder)
      ]
    );

    return result[0].toBigInt();
  }

  try_prevTotalRewardsPerWasset(
    _index: BigInt,
    _wassetHolder: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "prevTotalRewardsPerWasset",
      "prevTotalRewardsPerWasset(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_index),
        ethereum.Value.fromAddress(_wassetHolder)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isDistributionAccount(_addr: Address): boolean {
    let result = super.call(
      "isDistributionAccount",
      "isDistributionAccount(address):(bool)",
      [ethereum.Value.fromAddress(_addr)]
    );

    return result[0].toBoolean();
  }

  try_isDistributionAccount(_addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDistributionAccount",
      "isDistributionAccount(address):(bool)",
      [ethereum.Value.fromAddress(_addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  distributionAccountRewards(
    _index: BigInt,
    _distributionAccount: Address
  ): BigInt {
    let result = super.call(
      "distributionAccountRewards",
      "distributionAccountRewards(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_index),
        ethereum.Value.fromAddress(_distributionAccount)
      ]
    );

    return result[0].toBigInt();
  }

  try_distributionAccountRewards(
    _index: BigInt,
    _distributionAccount: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "distributionAccountRewards",
      "distributionAccountRewards(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_index),
        ethereum.Value.fromAddress(_distributionAccount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasClaimedAllYTRewards(
    _distributionAccount: Address,
    _subAccount: Address,
    _FCPaddr: Address
  ): boolean {
    let result = super.call(
      "hasClaimedAllYTRewards",
      "hasClaimedAllYTRewards(address,address,address):(bool)",
      [
        ethereum.Value.fromAddress(_distributionAccount),
        ethereum.Value.fromAddress(_subAccount),
        ethereum.Value.fromAddress(_FCPaddr)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasClaimedAllYTRewards(
    _distributionAccount: Address,
    _subAccount: Address,
    _FCPaddr: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasClaimedAllYTRewards",
      "hasClaimedAllYTRewards(address,address,address):(bool)",
      [
        ethereum.Value.fromAddress(_distributionAccount),
        ethereum.Value.fromAddress(_subAccount),
        ethereum.Value.fromAddress(_FCPaddr)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  subAccountPrevTotalReturnsPerWasset(
    _index: BigInt,
    _distributionAccount: Address,
    _subAccount: Address,
    _FCPaddr: Address
  ): BigInt {
    let result = super.call(
      "subAccountPrevTotalReturnsPerWasset",
      "subAccountPrevTotalReturnsPerWasset(uint256,address,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_index),
        ethereum.Value.fromAddress(_distributionAccount),
        ethereum.Value.fromAddress(_subAccount),
        ethereum.Value.fromAddress(_FCPaddr)
      ]
    );

    return result[0].toBigInt();
  }

  try_subAccountPrevTotalReturnsPerWasset(
    _index: BigInt,
    _distributionAccount: Address,
    _subAccount: Address,
    _FCPaddr: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "subAccountPrevTotalReturnsPerWasset",
      "subAccountPrevTotalReturnsPerWasset(uint256,address,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_index),
        ethereum.Value.fromAddress(_distributionAccount),
        ethereum.Value.fromAddress(_subAccount),
        ethereum.Value.fromAddress(_FCPaddr)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  subAccountPositions(
    _distributionAccount: Address,
    _subAccount: Address,
    _FCPaddr: Address
  ): IWrapper__subAccountPositionsResult {
    let result = super.call(
      "subAccountPositions",
      "subAccountPositions(address,address,address):(uint256,int256)",
      [
        ethereum.Value.fromAddress(_distributionAccount),
        ethereum.Value.fromAddress(_subAccount),
        ethereum.Value.fromAddress(_FCPaddr)
      ]
    );

    return new IWrapper__subAccountPositionsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_subAccountPositions(
    _distributionAccount: Address,
    _subAccount: Address,
    _FCPaddr: Address
  ): ethereum.CallResult<IWrapper__subAccountPositionsResult> {
    let result = super.tryCall(
      "subAccountPositions",
      "subAccountPositions(address,address,address):(uint256,int256)",
      [
        ethereum.Value.fromAddress(_distributionAccount),
        ethereum.Value.fromAddress(_subAccount),
        ethereum.Value.fromAddress(_FCPaddr)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IWrapper__subAccountPositionsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class FlashLoanCall extends ethereum.Call {
  get inputs(): FlashLoanCall__Inputs {
    return new FlashLoanCall__Inputs(this);
  }

  get outputs(): FlashLoanCall__Outputs {
    return new FlashLoanCall__Outputs(this);
  }
}

export class FlashLoanCall__Inputs {
  _call: FlashLoanCall;

  constructor(call: FlashLoanCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class FlashLoanCall__Outputs {
  _call: FlashLoanCall;

  constructor(call: FlashLoanCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositUnitAmountCall extends ethereum.Call {
  get inputs(): DepositUnitAmountCall__Inputs {
    return new DepositUnitAmountCall__Inputs(this);
  }

  get outputs(): DepositUnitAmountCall__Outputs {
    return new DepositUnitAmountCall__Outputs(this);
  }
}

export class DepositUnitAmountCall__Inputs {
  _call: DepositUnitAmountCall;

  constructor(call: DepositUnitAmountCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositUnitAmountCall__Outputs {
  _call: DepositUnitAmountCall;

  constructor(call: DepositUnitAmountCall) {
    this._call = call;
  }

  get _amountWrapped(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositWrappedAmountCall extends ethereum.Call {
  get inputs(): DepositWrappedAmountCall__Inputs {
    return new DepositWrappedAmountCall__Inputs(this);
  }

  get outputs(): DepositWrappedAmountCall__Outputs {
    return new DepositWrappedAmountCall__Outputs(this);
  }
}

export class DepositWrappedAmountCall__Inputs {
  _call: DepositWrappedAmountCall;

  constructor(call: DepositWrappedAmountCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositWrappedAmountCall__Outputs {
  _call: DepositWrappedAmountCall;

  constructor(call: DepositWrappedAmountCall) {
    this._call = call;
  }

  get _unitAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawUnitAmountCall extends ethereum.Call {
  get inputs(): WithdrawUnitAmountCall__Inputs {
    return new WithdrawUnitAmountCall__Inputs(this);
  }

  get outputs(): WithdrawUnitAmountCall__Outputs {
    return new WithdrawUnitAmountCall__Outputs(this);
  }
}

export class WithdrawUnitAmountCall__Inputs {
  _call: WithdrawUnitAmountCall;

  constructor(call: WithdrawUnitAmountCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _claimRewards(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class WithdrawUnitAmountCall__Outputs {
  _call: WithdrawUnitAmountCall;

  constructor(call: WithdrawUnitAmountCall) {
    this._call = call;
  }

  get _amountWrapped(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawWrappedAmountCall extends ethereum.Call {
  get inputs(): WithdrawWrappedAmountCall__Inputs {
    return new WithdrawWrappedAmountCall__Inputs(this);
  }

  get outputs(): WithdrawWrappedAmountCall__Outputs {
    return new WithdrawWrappedAmountCall__Outputs(this);
  }
}

export class WithdrawWrappedAmountCall__Inputs {
  _call: WithdrawWrappedAmountCall;

  constructor(call: WithdrawWrappedAmountCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _claimRewards(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class WithdrawWrappedAmountCall__Outputs {
  _call: WithdrawWrappedAmountCall;

  constructor(call: WithdrawWrappedAmountCall) {
    this._call = call;
  }

  get _unitAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ForceHarvestCall extends ethereum.Call {
  get inputs(): ForceHarvestCall__Inputs {
    return new ForceHarvestCall__Inputs(this);
  }

  get outputs(): ForceHarvestCall__Outputs {
    return new ForceHarvestCall__Outputs(this);
  }
}

export class ForceHarvestCall__Inputs {
  _call: ForceHarvestCall;

  constructor(call: ForceHarvestCall) {
    this._call = call;
  }
}

export class ForceHarvestCall__Outputs {
  _call: ForceHarvestCall;

  constructor(call: ForceHarvestCall) {
    this._call = call;
  }
}

export class ForceRewardsCollectionCall extends ethereum.Call {
  get inputs(): ForceRewardsCollectionCall__Inputs {
    return new ForceRewardsCollectionCall__Inputs(this);
  }

  get outputs(): ForceRewardsCollectionCall__Outputs {
    return new ForceRewardsCollectionCall__Outputs(this);
  }
}

export class ForceRewardsCollectionCall__Inputs {
  _call: ForceRewardsCollectionCall;

  constructor(call: ForceRewardsCollectionCall) {
    this._call = call;
  }
}

export class ForceRewardsCollectionCall__Outputs {
  _call: ForceRewardsCollectionCall;

  constructor(call: ForceRewardsCollectionCall) {
    this._call = call;
  }
}

export class RegisterAsDistributionAccountCall extends ethereum.Call {
  get inputs(): RegisterAsDistributionAccountCall__Inputs {
    return new RegisterAsDistributionAccountCall__Inputs(this);
  }

  get outputs(): RegisterAsDistributionAccountCall__Outputs {
    return new RegisterAsDistributionAccountCall__Outputs(this);
  }
}

export class RegisterAsDistributionAccountCall__Inputs {
  _call: RegisterAsDistributionAccountCall;

  constructor(call: RegisterAsDistributionAccountCall) {
    this._call = call;
  }
}

export class RegisterAsDistributionAccountCall__Outputs {
  _call: RegisterAsDistributionAccountCall;

  constructor(call: RegisterAsDistributionAccountCall) {
    this._call = call;
  }
}

export class DelistDistributionAccountCall extends ethereum.Call {
  get inputs(): DelistDistributionAccountCall__Inputs {
    return new DelistDistributionAccountCall__Inputs(this);
  }

  get outputs(): DelistDistributionAccountCall__Outputs {
    return new DelistDistributionAccountCall__Outputs(this);
  }
}

export class DelistDistributionAccountCall__Inputs {
  _call: DelistDistributionAccountCall;

  constructor(call: DelistDistributionAccountCall) {
    this._call = call;
  }
}

export class DelistDistributionAccountCall__Outputs {
  _call: DelistDistributionAccountCall;

  constructor(call: DelistDistributionAccountCall) {
    this._call = call;
  }
}

export class EditSubAccountPositionCall extends ethereum.Call {
  get inputs(): EditSubAccountPositionCall__Inputs {
    return new EditSubAccountPositionCall__Inputs(this);
  }

  get outputs(): EditSubAccountPositionCall__Outputs {
    return new EditSubAccountPositionCall__Outputs(this);
  }
}

export class EditSubAccountPositionCall__Inputs {
  _call: EditSubAccountPositionCall;

  constructor(call: EditSubAccountPositionCall) {
    this._call = call;
  }

  get _claimRewards(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get _subAccount(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _FCPaddr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get changeYield(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get changeBond(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class EditSubAccountPositionCall__Outputs {
  _call: EditSubAccountPositionCall;

  constructor(call: EditSubAccountPositionCall) {
    this._call = call;
  }
}

export class ForceClaimSubAccountRewardsCall extends ethereum.Call {
  get inputs(): ForceClaimSubAccountRewardsCall__Inputs {
    return new ForceClaimSubAccountRewardsCall__Inputs(this);
  }

  get outputs(): ForceClaimSubAccountRewardsCall__Outputs {
    return new ForceClaimSubAccountRewardsCall__Outputs(this);
  }
}

export class ForceClaimSubAccountRewardsCall__Inputs {
  _call: ForceClaimSubAccountRewardsCall;

  constructor(call: ForceClaimSubAccountRewardsCall) {
    this._call = call;
  }

  get _claimRewards(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get _distributionAccount(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _subAccount(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _FCPaddr(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ForceClaimSubAccountRewardsCall__Outputs {
  _call: ForceClaimSubAccountRewardsCall;

  constructor(call: ForceClaimSubAccountRewardsCall) {
    this._call = call;
  }
}

export class FCPDirectClaimSubAccountRewardsCall extends ethereum.Call {
  get inputs(): FCPDirectClaimSubAccountRewardsCall__Inputs {
    return new FCPDirectClaimSubAccountRewardsCall__Inputs(this);
  }

  get outputs(): FCPDirectClaimSubAccountRewardsCall__Outputs {
    return new FCPDirectClaimSubAccountRewardsCall__Outputs(this);
  }
}

export class FCPDirectClaimSubAccountRewardsCall__Inputs {
  _call: FCPDirectClaimSubAccountRewardsCall;

  constructor(call: FCPDirectClaimSubAccountRewardsCall) {
    this._call = call;
  }

  get _inPayoutPhase(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get _claimRewards(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get _subAcct(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _yield(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _wrappedClaim(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class FCPDirectClaimSubAccountRewardsCall__Outputs {
  _call: FCPDirectClaimSubAccountRewardsCall;

  constructor(call: FCPDirectClaimSubAccountRewardsCall) {
    this._call = call;
  }
}

export class FCPDirectDoubleClaimSubAccountRewardsCall extends ethereum.Call {
  get inputs(): FCPDirectDoubleClaimSubAccountRewardsCall__Inputs {
    return new FCPDirectDoubleClaimSubAccountRewardsCall__Inputs(this);
  }

  get outputs(): FCPDirectDoubleClaimSubAccountRewardsCall__Outputs {
    return new FCPDirectDoubleClaimSubAccountRewardsCall__Outputs(this);
  }
}

export class FCPDirectDoubleClaimSubAccountRewardsCall__Inputs {
  _call: FCPDirectDoubleClaimSubAccountRewardsCall;

  constructor(call: FCPDirectDoubleClaimSubAccountRewardsCall) {
    this._call = call;
  }

  get _inPayoutPhase(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get _claimRewards(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get _subAccts(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _yieldArr(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _wrappedClaims(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class FCPDirectDoubleClaimSubAccountRewardsCall__Outputs {
  _call: FCPDirectDoubleClaimSubAccountRewardsCall;

  constructor(call: FCPDirectDoubleClaimSubAccountRewardsCall) {
    this._call = call;
  }
}

export class SetInterestFeeCall extends ethereum.Call {
  get inputs(): SetInterestFeeCall__Inputs {
    return new SetInterestFeeCall__Inputs(this);
  }

  get outputs(): SetInterestFeeCall__Outputs {
    return new SetInterestFeeCall__Outputs(this);
  }
}

export class SetInterestFeeCall__Inputs {
  _call: SetInterestFeeCall;

  constructor(call: SetInterestFeeCall) {
    this._call = call;
  }

  get _SBPSRetained(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetInterestFeeCall__Outputs {
  _call: SetInterestFeeCall;

  constructor(call: SetInterestFeeCall) {
    this._call = call;
  }
}

export class SetFlashLoanFeeCall extends ethereum.Call {
  get inputs(): SetFlashLoanFeeCall__Inputs {
    return new SetFlashLoanFeeCall__Inputs(this);
  }

  get outputs(): SetFlashLoanFeeCall__Outputs {
    return new SetFlashLoanFeeCall__Outputs(this);
  }
}

export class SetFlashLoanFeeCall__Inputs {
  _call: SetFlashLoanFeeCall;

  constructor(call: SetFlashLoanFeeCall) {
    this._call = call;
  }

  get _flashLoanFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFlashLoanFeeCall__Outputs {
  _call: SetFlashLoanFeeCall;

  constructor(call: SetFlashLoanFeeCall) {
    this._call = call;
  }
}

export class AddRewardAssetCall extends ethereum.Call {
  get inputs(): AddRewardAssetCall__Inputs {
    return new AddRewardAssetCall__Inputs(this);
  }

  get outputs(): AddRewardAssetCall__Outputs {
    return new AddRewardAssetCall__Outputs(this);
  }
}

export class AddRewardAssetCall__Inputs {
  _call: AddRewardAssetCall;

  constructor(call: AddRewardAssetCall) {
    this._call = call;
  }

  get _rewardsAsset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddRewardAssetCall__Outputs {
  _call: AddRewardAssetCall;

  constructor(call: AddRewardAssetCall) {
    this._call = call;
  }
}

export class DeactivateRewardAssetCall extends ethereum.Call {
  get inputs(): DeactivateRewardAssetCall__Inputs {
    return new DeactivateRewardAssetCall__Inputs(this);
  }

  get outputs(): DeactivateRewardAssetCall__Outputs {
    return new DeactivateRewardAssetCall__Outputs(this);
  }
}

export class DeactivateRewardAssetCall__Inputs {
  _call: DeactivateRewardAssetCall;

  constructor(call: DeactivateRewardAssetCall) {
    this._call = call;
  }

  get _index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DeactivateRewardAssetCall__Outputs {
  _call: DeactivateRewardAssetCall;

  constructor(call: DeactivateRewardAssetCall) {
    this._call = call;
  }
}

export class ReactivateRewardAssetCall extends ethereum.Call {
  get inputs(): ReactivateRewardAssetCall__Inputs {
    return new ReactivateRewardAssetCall__Inputs(this);
  }

  get outputs(): ReactivateRewardAssetCall__Outputs {
    return new ReactivateRewardAssetCall__Outputs(this);
  }
}

export class ReactivateRewardAssetCall__Inputs {
  _call: ReactivateRewardAssetCall;

  constructor(call: ReactivateRewardAssetCall) {
    this._call = call;
  }

  get _index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ReactivateRewardAssetCall__Outputs {
  _call: ReactivateRewardAssetCall;

  constructor(call: ReactivateRewardAssetCall) {
    this._call = call;
  }
}

export class HarvestNonListedRewardAssetCall extends ethereum.Call {
  get inputs(): HarvestNonListedRewardAssetCall__Inputs {
    return new HarvestNonListedRewardAssetCall__Inputs(this);
  }

  get outputs(): HarvestNonListedRewardAssetCall__Outputs {
    return new HarvestNonListedRewardAssetCall__Outputs(this);
  }
}

export class HarvestNonListedRewardAssetCall__Inputs {
  _call: HarvestNonListedRewardAssetCall;

  constructor(call: HarvestNonListedRewardAssetCall) {
    this._call = call;
  }

  get _assetAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class HarvestNonListedRewardAssetCall__Outputs {
  _call: HarvestNonListedRewardAssetCall;

  constructor(call: HarvestNonListedRewardAssetCall) {
    this._call = call;
  }
}
