// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BalanceUpdate extends ethereum.Event {
  get params(): BalanceUpdate__Params {
    return new BalanceUpdate__Params(this);
  }
}

export class BalanceUpdate__Params {
  _event: BalanceUpdate;

  constructor(event: BalanceUpdate) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newYield(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newBond(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BondBalanceUpdate extends ethereum.Event {
  get params(): BondBalanceUpdate__Params {
    return new BondBalanceUpdate__Params(this);
  }
}

export class BondBalanceUpdate__Params {
  _event: BondBalanceUpdate;

  constructor(event: BondBalanceUpdate) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newBond(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ClaimPayout extends ethereum.Event {
  get params(): ClaimPayout__Params {
    return new ClaimPayout__Params(this);
  }
}

export class ClaimPayout__Params {
  _event: ClaimPayout;

  constructor(event: ClaimPayout) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get wrappedAmountDeposited(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdrawal extends ethereum.Event {
  get params(): Withdrawal__Params {
    return new Withdrawal__Params(this);
  }
}

export class Withdrawal__Params {
  _event: Withdrawal;

  constructor(event: Withdrawal) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get wrappedAmountWithdrawn(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FixCapitalPool__maxFlashLoanResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }
}

export class FixCapitalPool__flashFeeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }
}

export class FixCapitalPool extends ethereum.SmartContract {
  static bind(address: Address): FixCapitalPool {
    return new FixCapitalPool("FixCapitalPool", address);
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  inPayoutPhase(): boolean {
    let result = super.call("inPayoutPhase", "inPayoutPhase():(bool)", []);

    return result[0].toBoolean();
  }

  try_inPayoutPhase(): ethereum.CallResult<boolean> {
    let result = super.tryCall("inPayoutPhase", "inPayoutPhase():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maturity(): BigInt {
    let result = super.call("maturity", "maturity():(uint40)", []);

    return result[0].toBigInt();
  }

  try_maturity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maturity", "maturity():(uint40)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maturityConversionRate(): BigInt {
    let result = super.call(
      "maturityConversionRate",
      "maturityConversionRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maturityConversionRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maturityConversionRate",
      "maturityConversionRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  underlyingAssetAddress(): Address {
    let result = super.call(
      "underlyingAssetAddress",
      "underlyingAssetAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_underlyingAssetAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "underlyingAssetAddress",
      "underlyingAssetAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceBonds(_owner: Address): BigInt {
    let result = super.call("balanceBonds", "balanceBonds(address):(int256)", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceBonds(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceBonds",
      "balanceBonds(address):(int256)",
      [ethereum.Value.fromAddress(_owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceYield(_owner: Address): BigInt {
    let result = super.call("balanceYield", "balanceYield(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceYield(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceYield",
      "balanceYield(address):(uint256)",
      [ethereum.Value.fromAddress(_owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  yieldTokenAddress(): Address {
    let result = super.call(
      "yieldTokenAddress",
      "yieldTokenAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_yieldTokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "yieldTokenAddress",
      "yieldTokenAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  zeroCouponBondAddress(): Address {
    let result = super.call(
      "zeroCouponBondAddress",
      "zeroCouponBondAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_zeroCouponBondAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "zeroCouponBondAddress",
      "zeroCouponBondAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  whitelistedVaultFactories(_vaultFactoryAddress: Address): boolean {
    let result = super.call(
      "whitelistedVaultFactories",
      "whitelistedVaultFactories(address):(bool)",
      [ethereum.Value.fromAddress(_vaultFactoryAddress)]
    );

    return result[0].toBoolean();
  }

  try_whitelistedVaultFactories(
    _vaultFactoryAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "whitelistedVaultFactories",
      "whitelistedVaultFactories(address):(bool)",
      [ethereum.Value.fromAddress(_vaultFactoryAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  infoOracleAddress(): Address {
    let result = super.call(
      "infoOracleAddress",
      "infoOracleAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_infoOracleAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "infoOracleAddress",
      "infoOracleAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wrapper(): Address {
    let result = super.call("wrapper", "wrapper():(address)", []);

    return result[0].toAddress();
  }

  try_wrapper(): ethereum.CallResult<Address> {
    let result = super.tryCall("wrapper", "wrapper():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  TotalRewardsPerWassetAtMaturity(_index: BigInt): BigInt {
    let result = super.call(
      "TotalRewardsPerWassetAtMaturity",
      "TotalRewardsPerWassetAtMaturity(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );

    return result[0].toBigInt();
  }

  try_TotalRewardsPerWassetAtMaturity(
    _index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TotalRewardsPerWassetAtMaturity",
      "TotalRewardsPerWassetAtMaturity(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isFinalized(): boolean {
    let result = super.call("isFinalized", "isFinalized():(bool)", []);

    return result[0].toBoolean();
  }

  try_isFinalized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isFinalized", "isFinalized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastUpdate(): BigInt {
    let result = super.call("lastUpdate", "lastUpdate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastUpdate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastUpdate", "lastUpdate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentConversionRate(): BigInt {
    let result = super.call(
      "currentConversionRate",
      "currentConversionRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentConversionRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentConversionRate",
      "currentConversionRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  wrappedTokenFree(_owner: Address): BigInt {
    let result = super.call(
      "wrappedTokenFree",
      "wrappedTokenFree(address):(uint256)",
      [ethereum.Value.fromAddress(_owner)]
    );

    return result[0].toBigInt();
  }

  try_wrappedTokenFree(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "wrappedTokenFree",
      "wrappedTokenFree(address):(uint256)",
      [ethereum.Value.fromAddress(_owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalBalanceZCB(_owner: Address): BigInt {
    let result = super.call(
      "totalBalanceZCB",
      "totalBalanceZCB(address):(uint256)",
      [ethereum.Value.fromAddress(_owner)]
    );

    return result[0].toBigInt();
  }

  try_totalBalanceZCB(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBalanceZCB",
      "totalBalanceZCB(address):(uint256)",
      [ethereum.Value.fromAddress(_owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxFlashLoan(): FixCapitalPool__maxFlashLoanResult {
    let result = super.call(
      "maxFlashLoan",
      "maxFlashLoan():(uint256,int256)",
      []
    );

    return new FixCapitalPool__maxFlashLoanResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_maxFlashLoan(): ethereum.CallResult<FixCapitalPool__maxFlashLoanResult> {
    let result = super.tryCall(
      "maxFlashLoan",
      "maxFlashLoan():(uint256,int256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FixCapitalPool__maxFlashLoanResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  flashFee(
    _amountYield: BigInt,
    _amountBond: BigInt
  ): FixCapitalPool__flashFeeResult {
    let result = super.call(
      "flashFee",
      "flashFee(uint256,int256):(uint256,int256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amountYield),
        ethereum.Value.fromSignedBigInt(_amountBond)
      ]
    );

    return new FixCapitalPool__flashFeeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_flashFee(
    _amountYield: BigInt,
    _amountBond: BigInt
  ): ethereum.CallResult<FixCapitalPool__flashFeeResult> {
    let result = super.tryCall(
      "flashFee",
      "flashFee(uint256,int256):(uint256,int256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amountYield),
        ethereum.Value.fromSignedBigInt(_amountBond)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FixCapitalPool__flashFeeResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  flashLoan(
    _receiver: Address,
    _amountYield: BigInt,
    _amountBond: BigInt,
    _data: Bytes
  ): boolean {
    let result = super.call(
      "flashLoan",
      "flashLoan(address,uint256,int256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(_receiver),
        ethereum.Value.fromUnsignedBigInt(_amountYield),
        ethereum.Value.fromSignedBigInt(_amountBond),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toBoolean();
  }

  try_flashLoan(
    _receiver: Address,
    _amountYield: BigInt,
    _amountBond: BigInt,
    _data: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "flashLoan",
      "flashLoan(address,uint256,int256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(_receiver),
        ethereum.Value.fromUnsignedBigInt(_amountYield),
        ethereum.Value.fromSignedBigInt(_amountBond),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _wrapper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _maturity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _ZCB_YTdeployerAddr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _infoOracleAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _delegate1Address(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _delegate2Address(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class DepositWrappedTokenCall extends ethereum.Call {
  get inputs(): DepositWrappedTokenCall__Inputs {
    return new DepositWrappedTokenCall__Inputs(this);
  }

  get outputs(): DepositWrappedTokenCall__Outputs {
    return new DepositWrappedTokenCall__Outputs(this);
  }
}

export class DepositWrappedTokenCall__Inputs {
  _call: DepositWrappedTokenCall;

  constructor(call: DepositWrappedTokenCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amountWrappedTkn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositWrappedTokenCall__Outputs {
  _call: DepositWrappedTokenCall;

  constructor(call: DepositWrappedTokenCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amountWrappedTkn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _unwrap(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawAllCall extends ethereum.Call {
  get inputs(): WithdrawAllCall__Inputs {
    return new WithdrawAllCall__Inputs(this);
  }

  get outputs(): WithdrawAllCall__Outputs {
    return new WithdrawAllCall__Outputs(this);
  }
}

export class WithdrawAllCall__Inputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _unwrap(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class WithdrawAllCall__Outputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}

export class ClaimBondPayoutCall extends ethereum.Call {
  get inputs(): ClaimBondPayoutCall__Inputs {
    return new ClaimBondPayoutCall__Inputs(this);
  }

  get outputs(): ClaimBondPayoutCall__Outputs {
    return new ClaimBondPayoutCall__Outputs(this);
  }
}

export class ClaimBondPayoutCall__Inputs {
  _call: ClaimBondPayoutCall;

  constructor(call: ClaimBondPayoutCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _unwrap(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ClaimBondPayoutCall__Outputs {
  _call: ClaimBondPayoutCall;

  constructor(call: ClaimBondPayoutCall) {
    this._call = call;
  }
}

export class EnterPayoutPhaseCall extends ethereum.Call {
  get inputs(): EnterPayoutPhaseCall__Inputs {
    return new EnterPayoutPhaseCall__Inputs(this);
  }

  get outputs(): EnterPayoutPhaseCall__Outputs {
    return new EnterPayoutPhaseCall__Outputs(this);
  }
}

export class EnterPayoutPhaseCall__Inputs {
  _call: EnterPayoutPhaseCall;

  constructor(call: EnterPayoutPhaseCall) {
    this._call = call;
  }
}

export class EnterPayoutPhaseCall__Outputs {
  _call: EnterPayoutPhaseCall;

  constructor(call: EnterPayoutPhaseCall) {
    this._call = call;
  }
}

export class MintZCBToCall extends ethereum.Call {
  get inputs(): MintZCBToCall__Inputs {
    return new MintZCBToCall__Inputs(this);
  }

  get outputs(): MintZCBToCall__Outputs {
    return new MintZCBToCall__Outputs(this);
  }
}

export class MintZCBToCall__Inputs {
  _call: MintZCBToCall;

  constructor(call: MintZCBToCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintZCBToCall__Outputs {
  _call: MintZCBToCall;

  constructor(call: MintZCBToCall) {
    this._call = call;
  }
}

export class BurnZCBFromCall extends ethereum.Call {
  get inputs(): BurnZCBFromCall__Inputs {
    return new BurnZCBFromCall__Inputs(this);
  }

  get outputs(): BurnZCBFromCall__Outputs {
    return new BurnZCBFromCall__Outputs(this);
  }
}

export class BurnZCBFromCall__Inputs {
  _call: BurnZCBFromCall;

  constructor(call: BurnZCBFromCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnZCBFromCall__Outputs {
  _call: BurnZCBFromCall;

  constructor(call: BurnZCBFromCall) {
    this._call = call;
  }
}

export class TransferPositionCall extends ethereum.Call {
  get inputs(): TransferPositionCall__Inputs {
    return new TransferPositionCall__Inputs(this);
  }

  get outputs(): TransferPositionCall__Outputs {
    return new TransferPositionCall__Outputs(this);
  }
}

export class TransferPositionCall__Inputs {
  _call: TransferPositionCall;

  constructor(call: TransferPositionCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _yield(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _bond(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferPositionCall__Outputs {
  _call: TransferPositionCall;

  constructor(call: TransferPositionCall) {
    this._call = call;
  }
}

export class TransferPositionFromCall extends ethereum.Call {
  get inputs(): TransferPositionFromCall__Inputs {
    return new TransferPositionFromCall__Inputs(this);
  }

  get outputs(): TransferPositionFromCall__Outputs {
    return new TransferPositionFromCall__Outputs(this);
  }
}

export class TransferPositionFromCall__Inputs {
  _call: TransferPositionFromCall;

  constructor(call: TransferPositionFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _yield(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _bond(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferPositionFromCall__Outputs {
  _call: TransferPositionFromCall;

  constructor(call: TransferPositionFromCall) {
    this._call = call;
  }
}

export class DualApproveCall extends ethereum.Call {
  get inputs(): DualApproveCall__Inputs {
    return new DualApproveCall__Inputs(this);
  }

  get outputs(): DualApproveCall__Outputs {
    return new DualApproveCall__Outputs(this);
  }
}

export class DualApproveCall__Inputs {
  _call: DualApproveCall;

  constructor(call: DualApproveCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _allowanceZCB(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _allowanceYT(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DualApproveCall__Outputs {
  _call: DualApproveCall;

  constructor(call: DualApproveCall) {
    this._call = call;
  }
}

export class TransferZCBCall extends ethereum.Call {
  get inputs(): TransferZCBCall__Inputs {
    return new TransferZCBCall__Inputs(this);
  }

  get outputs(): TransferZCBCall__Outputs {
    return new TransferZCBCall__Outputs(this);
  }
}

export class TransferZCBCall__Inputs {
  _call: TransferZCBCall;

  constructor(call: TransferZCBCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferZCBCall__Outputs {
  _call: TransferZCBCall;

  constructor(call: TransferZCBCall) {
    this._call = call;
  }
}

export class TransferYTCall extends ethereum.Call {
  get inputs(): TransferYTCall__Inputs {
    return new TransferYTCall__Inputs(this);
  }

  get outputs(): TransferYTCall__Outputs {
    return new TransferYTCall__Outputs(this);
  }
}

export class TransferYTCall__Inputs {
  _call: TransferYTCall;

  constructor(call: TransferYTCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferYTCall__Outputs {
  _call: TransferYTCall;

  constructor(call: TransferYTCall) {
    this._call = call;
  }
}

export class SetVaultFactoryAddressCall extends ethereum.Call {
  get inputs(): SetVaultFactoryAddressCall__Inputs {
    return new SetVaultFactoryAddressCall__Inputs(this);
  }

  get outputs(): SetVaultFactoryAddressCall__Outputs {
    return new SetVaultFactoryAddressCall__Outputs(this);
  }
}

export class SetVaultFactoryAddressCall__Inputs {
  _call: SetVaultFactoryAddressCall;

  constructor(call: SetVaultFactoryAddressCall) {
    this._call = call;
  }

  get _vaultFactoryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVaultFactoryAddressCall__Outputs {
  _call: SetVaultFactoryAddressCall;

  constructor(call: SetVaultFactoryAddressCall) {
    this._call = call;
  }
}

export class FinalizeCall extends ethereum.Call {
  get inputs(): FinalizeCall__Inputs {
    return new FinalizeCall__Inputs(this);
  }

  get outputs(): FinalizeCall__Outputs {
    return new FinalizeCall__Outputs(this);
  }
}

export class FinalizeCall__Inputs {
  _call: FinalizeCall;

  constructor(call: FinalizeCall) {
    this._call = call;
  }
}

export class FinalizeCall__Outputs {
  _call: FinalizeCall;

  constructor(call: FinalizeCall) {
    this._call = call;
  }
}

export class SetFlashLoanFeeCall extends ethereum.Call {
  get inputs(): SetFlashLoanFeeCall__Inputs {
    return new SetFlashLoanFeeCall__Inputs(this);
  }

  get outputs(): SetFlashLoanFeeCall__Outputs {
    return new SetFlashLoanFeeCall__Outputs(this);
  }
}

export class SetFlashLoanFeeCall__Inputs {
  _call: SetFlashLoanFeeCall;

  constructor(call: SetFlashLoanFeeCall) {
    this._call = call;
  }

  get _flashLoanFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFlashLoanFeeCall__Outputs {
  _call: SetFlashLoanFeeCall;

  constructor(call: SetFlashLoanFeeCall) {
    this._call = call;
  }
}

export class FlashLoanCall extends ethereum.Call {
  get inputs(): FlashLoanCall__Inputs {
    return new FlashLoanCall__Inputs(this);
  }

  get outputs(): FlashLoanCall__Outputs {
    return new FlashLoanCall__Outputs(this);
  }
}

export class FlashLoanCall__Inputs {
  _call: FlashLoanCall;

  constructor(call: FlashLoanCall) {
    this._call = call;
  }

  get _receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amountYield(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amountBond(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class FlashLoanCall__Outputs {
  _call: FlashLoanCall;

  constructor(call: FlashLoanCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
