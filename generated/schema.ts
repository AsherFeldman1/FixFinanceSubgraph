// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class WrapperAsset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("Supply", Value.fromBigInt(BigInt.zero()));
    this.set("UnderlyingAsset", Value.fromString(""));
    this.set("Owner", Value.fromString(""));
    this.set("WrapperType", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WrapperAsset entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save WrapperAsset entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("WrapperAsset", id.toString(), this);
    }
  }

  static load(id: string): WrapperAsset | null {
    return changetype<WrapperAsset | null>(store.get("WrapperAsset", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Supply(): BigInt {
    let value = this.get("Supply");
    return value!.toBigInt();
  }

  set Supply(value: BigInt) {
    this.set("Supply", Value.fromBigInt(value));
  }

  get UnderlyingAsset(): string {
    let value = this.get("UnderlyingAsset");
    return value!.toString();
  }

  set UnderlyingAsset(value: string) {
    this.set("UnderlyingAsset", Value.fromString(value));
  }

  get Owner(): string {
    let value = this.get("Owner");
    return value!.toString();
  }

  set Owner(value: string) {
    this.set("Owner", Value.fromString(value));
  }

  get WrapperType(): BigInt {
    let value = this.get("WrapperType");
    return value!.toBigInt();
  }

  set WrapperType(value: BigInt) {
    this.set("WrapperType", Value.fromBigInt(value));
  }
}

export class FCP extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("Wrapper", Value.fromString(""));
    this.set("Owner", Value.fromString(""));
    this.set("Maturity", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FCP entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save FCP entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("FCP", id.toString(), this);
    }
  }

  static load(id: string): FCP | null {
    return changetype<FCP | null>(store.get("FCP", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Wrapper(): string {
    let value = this.get("Wrapper");
    return value!.toString();
  }

  set Wrapper(value: string) {
    this.set("Wrapper", Value.fromString(value));
  }

  get Owner(): string {
    let value = this.get("Owner");
    return value!.toString();
  }

  set Owner(value: string) {
    this.set("Owner", Value.fromString(value));
  }

  get Maturity(): BigInt {
    let value = this.get("Maturity");
    return value!.toBigInt();
  }

  set Maturity(value: BigInt) {
    this.set("Maturity", Value.fromBigInt(value));
  }
}

export class Orderbook extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("Pool", Value.fromString(""));
    this.set("Owner", Value.fromString(""));
    this.set("LockedZCB", Value.fromBigInt(BigInt.zero()));
    this.set("LockedYT", Value.fromBigInt(BigInt.zero()));
    this.set("AvailableZCBsells", Value.fromBigInt(BigInt.zero()));
    this.set("AvailableYTsells", Value.fromBigInt(BigInt.zero()));
    this.set("YTsellHead", Value.fromString(""));
    this.set("ZCBsellHead", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Orderbook entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Orderbook entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Orderbook", id.toString(), this);
    }
  }

  static load(id: string): Orderbook | null {
    return changetype<Orderbook | null>(store.get("Orderbook", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Pool(): string {
    let value = this.get("Pool");
    return value!.toString();
  }

  set Pool(value: string) {
    this.set("Pool", Value.fromString(value));
  }

  get Owner(): string {
    let value = this.get("Owner");
    return value!.toString();
  }

  set Owner(value: string) {
    this.set("Owner", Value.fromString(value));
  }

  get LockedZCB(): BigInt {
    let value = this.get("LockedZCB");
    return value!.toBigInt();
  }

  set LockedZCB(value: BigInt) {
    this.set("LockedZCB", Value.fromBigInt(value));
  }

  get LockedYT(): BigInt {
    let value = this.get("LockedYT");
    return value!.toBigInt();
  }

  set LockedYT(value: BigInt) {
    this.set("LockedYT", Value.fromBigInt(value));
  }

  get AvailableZCBsells(): BigInt {
    let value = this.get("AvailableZCBsells");
    return value!.toBigInt();
  }

  set AvailableZCBsells(value: BigInt) {
    this.set("AvailableZCBsells", Value.fromBigInt(value));
  }

  get AvailableYTsells(): BigInt {
    let value = this.get("AvailableYTsells");
    return value!.toBigInt();
  }

  set AvailableYTsells(value: BigInt) {
    this.set("AvailableYTsells", Value.fromBigInt(value));
  }

  get YTsellHead(): string {
    let value = this.get("YTsellHead");
    return value!.toString();
  }

  set YTsellHead(value: string) {
    this.set("YTsellHead", Value.fromString(value));
  }

  get ZCBsellHead(): string {
    let value = this.get("ZCBsellHead");
    return value!.toString();
  }

  set ZCBsellHead(value: string) {
    this.set("ZCBsellHead", Value.fromString(value));
  }

  get YTsells(): Array<string> {
    let value = this.get("YTsells");
    return value!.toStringArray();
  }

  set YTsells(value: Array<string>) {
    this.set("YTsells", Value.fromStringArray(value));
  }

  get ZCBsells(): Array<string> {
    let value = this.get("ZCBsells");
    return value!.toStringArray();
  }

  set ZCBsells(value: Array<string>) {
    this.set("ZCBsells", Value.fromStringArray(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get WrapperHoldings(): Array<string> {
    let value = this.get("WrapperHoldings");
    return value!.toStringArray();
  }

  set WrapperHoldings(value: Array<string>) {
    this.set("WrapperHoldings", Value.fromStringArray(value));
  }

  get FCPholdings(): Array<string> {
    let value = this.get("FCPholdings");
    return value!.toStringArray();
  }

  set FCPholdings(value: Array<string>) {
    this.set("FCPholdings", Value.fromStringArray(value));
  }

  get Vaults(): Array<string> {
    let value = this.get("Vaults");
    return value!.toStringArray();
  }

  set Vaults(value: Array<string>) {
    this.set("Vaults", Value.fromStringArray(value));
  }

  get WrappersCreated(): Array<string> {
    let value = this.get("WrappersCreated");
    return value!.toStringArray();
  }

  set WrappersCreated(value: Array<string>) {
    this.set("WrappersCreated", Value.fromStringArray(value));
  }

  get FCPsCreated(): Array<string> {
    let value = this.get("FCPsCreated");
    return value!.toStringArray();
  }

  set FCPsCreated(value: Array<string>) {
    this.set("FCPsCreated", Value.fromStringArray(value));
  }

  get OrderbooksCreated(): Array<string> {
    let value = this.get("OrderbooksCreated");
    return value!.toStringArray();
  }

  set OrderbooksCreated(value: Array<string>) {
    this.set("OrderbooksCreated", Value.fromStringArray(value));
  }
}

export class WrapperHolding extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("Asset", Value.fromString(""));
    this.set("Holder", Value.fromString(""));
    this.set("WrappedAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WrapperHolding entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save WrapperHolding entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("WrapperHolding", id.toString(), this);
    }
  }

  static load(id: string): WrapperHolding | null {
    return changetype<WrapperHolding | null>(store.get("WrapperHolding", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Asset(): string {
    let value = this.get("Asset");
    return value!.toString();
  }

  set Asset(value: string) {
    this.set("Asset", Value.fromString(value));
  }

  get Holder(): string {
    let value = this.get("Holder");
    return value!.toString();
  }

  set Holder(value: string) {
    this.set("Holder", Value.fromString(value));
  }

  get WrappedAmount(): BigInt {
    let value = this.get("WrappedAmount");
    return value!.toBigInt();
  }

  set WrappedAmount(value: BigInt) {
    this.set("WrappedAmount", Value.fromBigInt(value));
  }
}

export class FCPholding extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("Holder", Value.fromString(""));
    this.set("BondAmount", Value.fromBigInt(BigInt.zero()));
    this.set("YieldAmount", Value.fromBigInt(BigInt.zero()));
    this.set("OrderBookPosition", Value.fromString(""));
    this.set("Pool", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FCPholding entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save FCPholding entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("FCPholding", id.toString(), this);
    }
  }

  static load(id: string): FCPholding | null {
    return changetype<FCPholding | null>(store.get("FCPholding", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Holder(): string {
    let value = this.get("Holder");
    return value!.toString();
  }

  set Holder(value: string) {
    this.set("Holder", Value.fromString(value));
  }

  get BondAmount(): BigInt {
    let value = this.get("BondAmount");
    return value!.toBigInt();
  }

  set BondAmount(value: BigInt) {
    this.set("BondAmount", Value.fromBigInt(value));
  }

  get YieldAmount(): BigInt {
    let value = this.get("YieldAmount");
    return value!.toBigInt();
  }

  set YieldAmount(value: BigInt) {
    this.set("YieldAmount", Value.fromBigInt(value));
  }

  get OrderBookPosition(): string {
    let value = this.get("OrderBookPosition");
    return value!.toString();
  }

  set OrderBookPosition(value: string) {
    this.set("OrderBookPosition", Value.fromString(value));
  }

  get Pool(): string {
    let value = this.get("Pool");
    return value!.toString();
  }

  set Pool(value: string) {
    this.set("Pool", Value.fromString(value));
  }
}

export class OrderbookPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("Orderbook", Value.fromString(""));
    this.set("User", Value.fromString(""));
    this.set("DepositedBondAmount", Value.fromBigInt(BigInt.zero()));
    this.set("DepositedYieldAmount", Value.fromBigInt(BigInt.zero()));
    this.set("LockedZCB", Value.fromBigInt(BigInt.zero()));
    this.set("LockedYT", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OrderbookPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save OrderbookPosition entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("OrderbookPosition", id.toString(), this);
    }
  }

  static load(id: string): OrderbookPosition | null {
    return changetype<OrderbookPosition | null>(
      store.get("OrderbookPosition", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Orderbook(): string {
    let value = this.get("Orderbook");
    return value!.toString();
  }

  set Orderbook(value: string) {
    this.set("Orderbook", Value.fromString(value));
  }

  get User(): string {
    let value = this.get("User");
    return value!.toString();
  }

  set User(value: string) {
    this.set("User", Value.fromString(value));
  }

  get DepositedBondAmount(): BigInt {
    let value = this.get("DepositedBondAmount");
    return value!.toBigInt();
  }

  set DepositedBondAmount(value: BigInt) {
    this.set("DepositedBondAmount", Value.fromBigInt(value));
  }

  get DepositedYieldAmount(): BigInt {
    let value = this.get("DepositedYieldAmount");
    return value!.toBigInt();
  }

  set DepositedYieldAmount(value: BigInt) {
    this.set("DepositedYieldAmount", Value.fromBigInt(value));
  }

  get LockedZCB(): BigInt {
    let value = this.get("LockedZCB");
    return value!.toBigInt();
  }

  set LockedZCB(value: BigInt) {
    this.set("LockedZCB", Value.fromBigInt(value));
  }

  get LockedYT(): BigInt {
    let value = this.get("LockedYT");
    return value!.toBigInt();
  }

  set LockedYT(value: BigInt) {
    this.set("LockedYT", Value.fromBigInt(value));
  }

  get ZCBsells(): Array<string> {
    let value = this.get("ZCBsells");
    return value!.toStringArray();
  }

  set ZCBsells(value: Array<string>) {
    this.set("ZCBsells", Value.fromStringArray(value));
  }

  get YTsells(): Array<string> {
    let value = this.get("YTsells");
    return value!.toStringArray();
  }

  set YTsells(value: Array<string>) {
    this.set("YTsells", Value.fromStringArray(value));
  }
}

export class YTVault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("Owner", Value.fromString(""));
    this.set("Type", Value.fromString(""));
    this.set("Collateral", Value.fromString(""));
    this.set("Debt", Value.fromString(""));
    this.set("StabilityFeeAPR", Value.fromBigInt(BigInt.zero()));
    this.set("AmountSFee", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save YTVault entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save YTVault entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("YTVault", id.toString(), this);
    }
  }

  static load(id: string): YTVault | null {
    return changetype<YTVault | null>(store.get("YTVault", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Owner(): string {
    let value = this.get("Owner");
    return value!.toString();
  }

  set Owner(value: string) {
    this.set("Owner", Value.fromString(value));
  }

  get Type(): string {
    let value = this.get("Type");
    return value!.toString();
  }

  set Type(value: string) {
    this.set("Type", Value.fromString(value));
  }

  get Collateral(): string {
    let value = this.get("Collateral");
    return value!.toString();
  }

  set Collateral(value: string) {
    this.set("Collateral", Value.fromString(value));
  }

  get Debt(): string {
    let value = this.get("Debt");
    return value!.toString();
  }

  set Debt(value: string) {
    this.set("Debt", Value.fromString(value));
  }

  get StabilityFeeAPR(): BigInt {
    let value = this.get("StabilityFeeAPR");
    return value!.toBigInt();
  }

  set StabilityFeeAPR(value: BigInt) {
    this.set("StabilityFeeAPR", Value.fromBigInt(value));
  }

  get AmountSFee(): BigInt {
    let value = this.get("AmountSFee");
    return value!.toBigInt();
  }

  set AmountSFee(value: BigInt) {
    this.set("AmountSFee", Value.fromBigInt(value));
  }
}

export class YTVaultCollateral extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("Pool", Value.fromString(""));
    this.set("BondSupplied", Value.fromBigInt(BigInt.zero()));
    this.set("YieldSupplied", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save YTVaultCollateral entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save YTVaultCollateral entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("YTVaultCollateral", id.toString(), this);
    }
  }

  static load(id: string): YTVaultCollateral | null {
    return changetype<YTVaultCollateral | null>(
      store.get("YTVaultCollateral", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Pool(): string {
    let value = this.get("Pool");
    return value!.toString();
  }

  set Pool(value: string) {
    this.set("Pool", Value.fromString(value));
  }

  get BondSupplied(): BigInt {
    let value = this.get("BondSupplied");
    return value!.toBigInt();
  }

  set BondSupplied(value: BigInt) {
    this.set("BondSupplied", Value.fromBigInt(value));
  }

  get YieldSupplied(): BigInt {
    let value = this.get("YieldSupplied");
    return value!.toBigInt();
  }

  set YieldSupplied(value: BigInt) {
    this.set("YieldSupplied", Value.fromBigInt(value));
  }
}

export class YTVaultDebt extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("Pool", Value.fromString(""));
    this.set("ZCBBorrowed", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save YTVaultDebt entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save YTVaultDebt entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("YTVaultDebt", id.toString(), this);
    }
  }

  static load(id: string): YTVaultDebt | null {
    return changetype<YTVaultDebt | null>(store.get("YTVaultDebt", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Pool(): string {
    let value = this.get("Pool");
    return value!.toString();
  }

  set Pool(value: string) {
    this.set("Pool", Value.fromString(value));
  }

  get ZCBBorrowed(): BigInt {
    let value = this.get("ZCBBorrowed");
    return value!.toBigInt();
  }

  set ZCBBorrowed(value: BigInt) {
    this.set("ZCBBorrowed", Value.fromBigInt(value));
  }
}

export class Vault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("Owner", Value.fromString(""));
    this.set("Type", Value.fromString(""));
    this.set("Collateral", Value.fromString(""));
    this.set("Debt", Value.fromString(""));
    this.set("StabilityFeeAPR", Value.fromBigInt(BigInt.zero()));
    this.set("AmountSFee", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vault entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Vault entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Vault", id.toString(), this);
    }
  }

  static load(id: string): Vault | null {
    return changetype<Vault | null>(store.get("Vault", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Owner(): string {
    let value = this.get("Owner");
    return value!.toString();
  }

  set Owner(value: string) {
    this.set("Owner", Value.fromString(value));
  }

  get Type(): string {
    let value = this.get("Type");
    return value!.toString();
  }

  set Type(value: string) {
    this.set("Type", Value.fromString(value));
  }

  get Collateral(): string {
    let value = this.get("Collateral");
    return value!.toString();
  }

  set Collateral(value: string) {
    this.set("Collateral", Value.fromString(value));
  }

  get Debt(): string {
    let value = this.get("Debt");
    return value!.toString();
  }

  set Debt(value: string) {
    this.set("Debt", Value.fromString(value));
  }

  get StabilityFeeAPR(): BigInt {
    let value = this.get("StabilityFeeAPR");
    return value!.toBigInt();
  }

  set StabilityFeeAPR(value: BigInt) {
    this.set("StabilityFeeAPR", Value.fromBigInt(value));
  }

  get AmountSFee(): BigInt {
    let value = this.get("AmountSFee");
    return value!.toBigInt();
  }

  set AmountSFee(value: BigInt) {
    this.set("AmountSFee", Value.fromBigInt(value));
  }
}

export class VaultCollateral extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("AssetType", Value.fromString(""));
    this.set("Asset", Value.fromString(""));
    this.set("Amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VaultCollateral entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save VaultCollateral entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("VaultCollateral", id.toString(), this);
    }
  }

  static load(id: string): VaultCollateral | null {
    return changetype<VaultCollateral | null>(store.get("VaultCollateral", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get AssetType(): string {
    let value = this.get("AssetType");
    return value!.toString();
  }

  set AssetType(value: string) {
    this.set("AssetType", Value.fromString(value));
  }

  get Asset(): string {
    let value = this.get("Asset");
    return value!.toString();
  }

  set Asset(value: string) {
    this.set("Asset", Value.fromString(value));
  }

  get Amount(): BigInt {
    let value = this.get("Amount");
    return value!.toBigInt();
  }

  set Amount(value: BigInt) {
    this.set("Amount", Value.fromBigInt(value));
  }
}

export class VaultDebt extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("Asset", Value.fromString(""));
    this.set("Amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VaultDebt entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save VaultDebt entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("VaultDebt", id.toString(), this);
    }
  }

  static load(id: string): VaultDebt | null {
    return changetype<VaultDebt | null>(store.get("VaultDebt", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Asset(): string {
    let value = this.get("Asset");
    return value!.toString();
  }

  set Asset(value: string) {
    this.set("Asset", Value.fromString(value));
  }

  get Amount(): BigInt {
    let value = this.get("Amount");
    return value!.toBigInt();
  }

  set Amount(value: BigInt) {
    this.set("Amount", Value.fromBigInt(value));
  }
}

export class ZCBsell extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("PreviousOrder", Value.fromString(""));
    this.set("NextOrder", Value.fromString(""));
    this.set("Maker", Value.fromString(""));
    this.set("Position", Value.fromString(""));
    this.set("Amount", Value.fromBigInt(BigInt.zero()));
    this.set("MaturityConversionRate", Value.fromBigInt(BigInt.zero()));
    this.set("orderbook", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ZCBsell entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ZCBsell entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ZCBsell", id.toString(), this);
    }
  }

  static load(id: string): ZCBsell | null {
    return changetype<ZCBsell | null>(store.get("ZCBsell", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get PreviousOrder(): string {
    let value = this.get("PreviousOrder");
    return value!.toString();
  }

  set PreviousOrder(value: string) {
    this.set("PreviousOrder", Value.fromString(value));
  }

  get NextOrder(): string {
    let value = this.get("NextOrder");
    return value!.toString();
  }

  set NextOrder(value: string) {
    this.set("NextOrder", Value.fromString(value));
  }

  get Maker(): string {
    let value = this.get("Maker");
    return value!.toString();
  }

  set Maker(value: string) {
    this.set("Maker", Value.fromString(value));
  }

  get Position(): string {
    let value = this.get("Position");
    return value!.toString();
  }

  set Position(value: string) {
    this.set("Position", Value.fromString(value));
  }

  get Amount(): BigInt {
    let value = this.get("Amount");
    return value!.toBigInt();
  }

  set Amount(value: BigInt) {
    this.set("Amount", Value.fromBigInt(value));
  }

  get MaturityConversionRate(): BigInt {
    let value = this.get("MaturityConversionRate");
    return value!.toBigInt();
  }

  set MaturityConversionRate(value: BigInt) {
    this.set("MaturityConversionRate", Value.fromBigInt(value));
  }

  get orderbook(): string {
    let value = this.get("orderbook");
    return value!.toString();
  }

  set orderbook(value: string) {
    this.set("orderbook", Value.fromString(value));
  }
}

export class YTsell extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("PreviousOrder", Value.fromString(""));
    this.set("NextOrder", Value.fromString(""));
    this.set("Maker", Value.fromString(""));
    this.set("Position", Value.fromString(""));
    this.set("Amount", Value.fromBigInt(BigInt.zero()));
    this.set("MaturityConversionRate", Value.fromBigInt(BigInt.zero()));
    this.set("orderbook", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save YTsell entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save YTsell entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("YTsell", id.toString(), this);
    }
  }

  static load(id: string): YTsell | null {
    return changetype<YTsell | null>(store.get("YTsell", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get PreviousOrder(): string {
    let value = this.get("PreviousOrder");
    return value!.toString();
  }

  set PreviousOrder(value: string) {
    this.set("PreviousOrder", Value.fromString(value));
  }

  get NextOrder(): string {
    let value = this.get("NextOrder");
    return value!.toString();
  }

  set NextOrder(value: string) {
    this.set("NextOrder", Value.fromString(value));
  }

  get Maker(): string {
    let value = this.get("Maker");
    return value!.toString();
  }

  set Maker(value: string) {
    this.set("Maker", Value.fromString(value));
  }

  get Position(): string {
    let value = this.get("Position");
    return value!.toString();
  }

  set Position(value: string) {
    this.set("Position", Value.fromString(value));
  }

  get Amount(): BigInt {
    let value = this.get("Amount");
    return value!.toBigInt();
  }

  set Amount(value: BigInt) {
    this.set("Amount", Value.fromBigInt(value));
  }

  get MaturityConversionRate(): BigInt {
    let value = this.get("MaturityConversionRate");
    return value!.toBigInt();
  }

  set MaturityConversionRate(value: BigInt) {
    this.set("MaturityConversionRate", Value.fromBigInt(value));
  }

  get orderbook(): string {
    let value = this.get("orderbook");
    return value!.toString();
  }

  set orderbook(value: string) {
    this.set("orderbook", Value.fromString(value));
  }
}
