import { clearStore, test, assert } from "matchstick-as/assembly/index"
import { handleDeposit, handleWithdrawal, handleTransfer, handleFlashMint, handleFlashBurn } from "../src/Main/WrapperMappings"
import { handleWrapperDeployment } from "../src/Main/HandleDeployments"
import { newDeposit, newWrapper, newWithdrawal, newTransfer, newFlashMint, newFlashBurn } from "./testUtils"
import { logStore } from "matchstick-as/assembly/store"

test("deploy wrapper and deposit", () => {
	let newWrapperEvent = newWrapper(
			"0x0000000000000000000000000000000000000001",
			"0x0000000000000000000000000000000000000002",
			"0x0000000000000000000000000000000000000003",
			1
		)
	handleWrapperDeployment(newWrapperEvent)
	let newDepositEvent = newDeposit(
			"0x0000000000000000000000000000000000000003",
			"0x0000000000000000000000000000000000000001",
			10
		)
	handleDeposit(newDepositEvent)
	assert.fieldEquals("WrapperHolding", "0x0000000000000000000000000000000000000003-0x0000000000000000000000000000000000000001",
		"id", "0x0000000000000000000000000000000000000003-0x0000000000000000000000000000000000000001")
	assert.fieldEquals("WrapperHolding", "0x0000000000000000000000000000000000000003-0x0000000000000000000000000000000000000001",
		"Holder", "0x0000000000000000000000000000000000000003")
	assert.fieldEquals("WrapperHolding", "0x0000000000000000000000000000000000000003-0x0000000000000000000000000000000000000001",
		"Asset", "0x0000000000000000000000000000000000000001")
	assert.fieldEquals("WrapperHolding", "0x0000000000000000000000000000000000000003-0x0000000000000000000000000000000000000001",
		"WrappedAmount", "10")
})

test("handle withdrawal event", () => {
	let newWithdrawalEvent = newWithdrawal(
			"0x0000000000000000000000000000000000000003",
			"0x0000000000000000000000000000000000000001",
			6
		)
	handleWithdrawal(newWithdrawalEvent)
	assert.fieldEquals("WrapperHolding", "0x0000000000000000000000000000000000000003-0x0000000000000000000000000000000000000001",
		"WrappedAmount", "4")
	assert.fieldEquals("WrapperAsset", "0x0000000000000000000000000000000000000001", "Supply", "4")
})

test("handle transfer event", () => {
	let newTransferEvent = newTransfer(
			"0x0000000000000000000000000000000000000003",
			"0x0000000000000000000000000000000000000004",
			"0x0000000000000000000000000000000000000001",
			3
		)
	handleTransfer(newTransferEvent)
	assert.fieldEquals("User", "0x0000000000000000000000000000000000000004", "id", "0x0000000000000000000000000000000000000004")
	assert.fieldEquals("WrapperHolding", "0x0000000000000000000000000000000000000003-0x0000000000000000000000000000000000000001",
		"WrappedAmount", "1")
	assert.fieldEquals("WrapperHolding", "0x0000000000000000000000000000000000000004-0x0000000000000000000000000000000000000001",
		"WrappedAmount", "3")
})

test("handle flash mint", () => {
	let newMint = newFlashMint("0x0000000000000000000000000000000000000004", "0x0000000000000000000000000000000000000001", 2)
	handleFlashMint(newMint)
	assert.fieldEquals("WrapperHolding", "0x0000000000000000000000000000000000000004-0x0000000000000000000000000000000000000001",
		"WrappedAmount", "5")
	assert.fieldEquals("WrapperAsset", "0x0000000000000000000000000000000000000001", "Supply", "4")
})

test("handle flash burn", () => {
	let newBurn = newFlashBurn("0x0000000000000000000000000000000000000004", "0x0000000000000000000000000000000000000001", 2, 1)
	handleFlashBurn(newBurn)
	assert.fieldEquals("WrapperAsset", "0x0000000000000000000000000000000000000001", "Supply", "3")
	assert.fieldEquals("WrapperHolding", "0x0000000000000000000000000000000000000004-0x0000000000000000000000000000000000000001",
		"WrappedAmount", "3")
})