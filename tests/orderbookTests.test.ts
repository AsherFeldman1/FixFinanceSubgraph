import { clearStore, test, assert } from "matchstick-as/assembly/index"
import { logStore } from "matchstick-as/assembly/store"
import { log } from "matchstick-as/assembly/log"
import { handleOrderBookDeposit, handleOrderBookWithdrawal, handleLimitSellZCB,
handleLimitSellYT, handleModification } from "../src/Main/OrderbookMappings"
import { newOrderBook, newFCP, newBookDeposit, newBookWithdrawal, newZCBSell, newYTSell,
newModifyOrder } from "./testUtils"
import { handleFCPdeployment, handleOrderbookDeployment } from "../src/Main/HandleDeployments"

test("deploy orderbook and deposit in it", () => {
	let newFCPEvent = newFCP(
		"0x0000000000000000000000000000000000000001",
		"0x0000000000000000000000000000000000000002",
		"0x0000000000000000000000000000000000000003",
		1
	)
	handleFCPdeployment(newFCPEvent)
	assert.fieldEquals("FCP", "0x0000000000000000000000000000000000000001", "id", "0x0000000000000000000000000000000000000001")
	assert.fieldEquals("FCP", "0x0000000000000000000000000000000000000001", "Wrapper", "0x0000000000000000000000000000000000000002")
	assert.fieldEquals("FCP", "0x0000000000000000000000000000000000000001", "Owner", "0x0000000000000000000000000000000000000003")
	assert.fieldEquals("FCP", "0x0000000000000000000000000000000000000001", "Maturity", "1")
	assert.fieldEquals("User", "0x0000000000000000000000000000000000000003", "id", "0x0000000000000000000000000000000000000003")

	let newBookEvent = newOrderBook(
		"0x0000000000000000000000000000000000000002",
		"0x0000000000000000000000000000000000000001",
	)
	handleOrderbookDeployment(newBookEvent)
	assert.fieldEquals("Orderbook", "0x0000000000000000000000000000000000000002", "id", "0x0000000000000000000000000000000000000002")
	assert.fieldEquals("Orderbook", "0x0000000000000000000000000000000000000002", "Pool", "0x0000000000000000000000000000000000000001")
	assert.fieldEquals("Orderbook", "0x0000000000000000000000000000000000000002", "YTsellHead", "")
	assert.fieldEquals("Orderbook", "0x0000000000000000000000000000000000000002", "ZCBsellHead", "")

	let newDep = newBookDeposit(
		"0x0000000000000000000000000000000000000003",
		"0x0000000000000000000000000000000000000002",
		10,
		11
	)
	handleOrderBookDeposit(newDep)
	assert.fieldEquals("OrderbookPosition", "0x0000000000000000000000000000000000000003-0x0000000000000000000000000000000000000001",
		"User", "0x0000000000000000000000000000000000000003")
	assert.fieldEquals("OrderbookPosition", "0x0000000000000000000000000000000000000003-0x0000000000000000000000000000000000000001",
		"DepositedYieldAmount", "11")
	assert.fieldEquals("OrderbookPosition", "0x0000000000000000000000000000000000000003-0x0000000000000000000000000000000000000001",
		"DepositedBondAmount", "10")
})

test("withdraw from the orderbook", () => {
	let newWithdrawal = newBookWithdrawal(
		"0x0000000000000000000000000000000000000003",
		"0x0000000000000000000000000000000000000002",
		5,
		1
	)
	handleOrderBookWithdrawal(newWithdrawal)
	assert.fieldEquals("OrderbookPosition", "0x0000000000000000000000000000000000000003-0x0000000000000000000000000000000000000001",
		"DepositedYieldAmount", "10")
	assert.fieldEquals("OrderbookPosition", "0x0000000000000000000000000000000000000003-0x0000000000000000000000000000000000000001",
		"DepositedBondAmount", "5")
})

test("limit sell on zcb", () => {
	let newZCBSellEvent = newZCBSell(
		"0x0000000000000000000000000000000000000003",
		"0x0000000000000000000000000000000000000002",
		0,
		1,
		2,
		3
	)
	handleLimitSellZCB(newZCBSellEvent)
	assert.fieldEquals("ZCBsell", "0x1-0x0000000000000000000000000000000000000002", "id", "0x1-0x0000000000000000000000000000000000000002")
	assert.fieldEquals("ZCBsell", "0x1-0x0000000000000000000000000000000000000002", "Amount", "2")
	assert.fieldEquals("OrderbookPosition", "0x0000000000000000000000000000000000000003-0x0000000000000000000000000000000000000001",
		"DepositedBondAmount", "5")
	assert.fieldEquals("OrderbookPosition", "0x0000000000000000000000000000000000000003-0x0000000000000000000000000000000000000001",
		"LockedZCB", "2")
	assert.fieldEquals("ZCBsell", "0x1-0x0000000000000000000000000000000000000002", "PreviousOrder", "")
	assert.fieldEquals("ZCBsell", "0x1-0x0000000000000000000000000000000000000002", "NextOrder", "")
	assert.fieldEquals("ZCBsell", "0x1-0x0000000000000000000000000000000000000002", "MaturityConversionRate", "3")
	assert.fieldEquals("Orderbook", "0x0000000000000000000000000000000000000002", "ZCBsellHead", "0x1-0x0000000000000000000000000000000000000002")
})

test("limit sell zcb again for prev order", () => {
	let newZCBSellEvent = newZCBSell(
		"0x0000000000000000000000000000000000000003",
		"0x0000000000000000000000000000000000000002",
		1,
		2,
		3,
		4
	)
	handleLimitSellZCB(newZCBSellEvent)
	assert.fieldEquals("ZCBsell", "0x2-0x0000000000000000000000000000000000000002", "id", "0x2-0x0000000000000000000000000000000000000002")
	assert.fieldEquals("ZCBsell", "0x2-0x0000000000000000000000000000000000000002",
	 "PreviousOrder", "0x1-0x0000000000000000000000000000000000000002")
	assert.fieldEquals("ZCBsell", "0x1-0x0000000000000000000000000000000000000002",
	 "NextOrder", "0x2-0x0000000000000000000000000000000000000002")
	assert.fieldEquals("Orderbook", "0x0000000000000000000000000000000000000002", "ZCBsellHead", "0x1-0x0000000000000000000000000000000000000002")
})

test("limit sell zcb again at head of zcb sells", () => {
	let newZCBSellEvent = newZCBSell(
		"0x0000000000000000000000000000000000000003",
		"0x0000000000000000000000000000000000000002",
		0,
		5,
		3,
		4
	)
	handleLimitSellZCB(newZCBSellEvent)
	assert.fieldEquals("ZCBsell", "0x5-0x0000000000000000000000000000000000000002", "id", "0x5-0x0000000000000000000000000000000000000002")
	assert.fieldEquals("ZCBsell", "0x5-0x0000000000000000000000000000000000000002", "NextOrder", "0x1-0x0000000000000000000000000000000000000002")
	assert.fieldEquals("ZCBsell", "0x1-0x0000000000000000000000000000000000000002", "NextOrder", "0x2-0x0000000000000000000000000000000000000002")
	assert.fieldEquals("ZCBsell", "0x2-0x0000000000000000000000000000000000000002", "NextOrder", "")
	assert.fieldEquals("ZCBsell", "0x2-0x0000000000000000000000000000000000000002", "PreviousOrder", "0x1-0x0000000000000000000000000000000000000002")
	assert.fieldEquals("ZCBsell", "0x1-0x0000000000000000000000000000000000000002", "PreviousOrder", "0x5-0x0000000000000000000000000000000000000002")
	assert.fieldEquals("ZCBsell", "0x5-0x0000000000000000000000000000000000000002", "PreviousOrder", "")
	assert.fieldEquals("Orderbook", "0x0000000000000000000000000000000000000002", "AvailableZCBsells", "3")
})

test("limit sell on yt", () => {
	let newYTSellEvent = newYTSell(
		"0x0000000000000000000000000000000000000003",
		"0x0000000000000000000000000000000000000002",
		0,
		1,
		2,
		3
	)
	handleLimitSellYT(newYTSellEvent)
	assert.fieldEquals("YTsell", "0x1-0x0000000000000000000000000000000000000002", "id", "0x1-0x0000000000000000000000000000000000000002")
	assert.fieldEquals("YTsell", "0x1-0x0000000000000000000000000000000000000002", "Amount", "2")
	assert.fieldEquals("OrderbookPosition", "0x0000000000000000000000000000000000000003-0x0000000000000000000000000000000000000001",
		"DepositedBondAmount", "5")
	assert.fieldEquals("OrderbookPosition", "0x0000000000000000000000000000000000000003-0x0000000000000000000000000000000000000001",
		"LockedYT", "2")
	assert.fieldEquals("YTsell", "0x1-0x0000000000000000000000000000000000000002", "PreviousOrder", "")
	assert.fieldEquals("YTsell", "0x1-0x0000000000000000000000000000000000000002", "NextOrder", "")
	assert.fieldEquals("YTsell", "0x1-0x0000000000000000000000000000000000000002", "MaturityConversionRate", "3")
	assert.fieldEquals("Orderbook", "0x0000000000000000000000000000000000000002", "YTsellHead", "0x1-0x0000000000000000000000000000000000000002")
})

test("limit sell yt again for prev order", () => {
	let newYTSellEvent = newYTSell(
		"0x0000000000000000000000000000000000000003",
		"0x0000000000000000000000000000000000000002",
		1,
		2,
		3,
		4
	)
	handleLimitSellYT(newYTSellEvent)
	assert.fieldEquals("YTsell", "0x2-0x0000000000000000000000000000000000000002", "id", "0x2-0x0000000000000000000000000000000000000002")
	assert.fieldEquals("YTsell", "0x2-0x0000000000000000000000000000000000000002",
	 "PreviousOrder", "0x1-0x0000000000000000000000000000000000000002")
	assert.fieldEquals("YTsell", "0x1-0x0000000000000000000000000000000000000002",
	 "NextOrder", "0x2-0x0000000000000000000000000000000000000002")
	assert.fieldEquals("Orderbook", "0x0000000000000000000000000000000000000002", "YTsellHead", "0x1-0x0000000000000000000000000000000000000002")
})

test("limit sell yt again at head of yt sells", () => {
	let newYTSellEvent = newYTSell(
		"0x0000000000000000000000000000000000000003",
		"0x0000000000000000000000000000000000000002",
		0,
		5,
		3,
		4
	)
	handleLimitSellYT(newYTSellEvent)
	assert.fieldEquals("YTsell", "0x5-0x0000000000000000000000000000000000000002", "id", "0x5-0x0000000000000000000000000000000000000002")
	assert.fieldEquals("YTsell", "0x5-0x0000000000000000000000000000000000000002", "NextOrder", "0x1-0x0000000000000000000000000000000000000002")
	assert.fieldEquals("YTsell", "0x1-0x0000000000000000000000000000000000000002", "NextOrder", "0x2-0x0000000000000000000000000000000000000002")
	assert.fieldEquals("YTsell", "0x2-0x0000000000000000000000000000000000000002", "NextOrder", "")
	assert.fieldEquals("YTsell", "0x2-0x0000000000000000000000000000000000000002", "PreviousOrder", "0x1-0x0000000000000000000000000000000000000002")
	assert.fieldEquals("YTsell", "0x1-0x0000000000000000000000000000000000000002", "PreviousOrder", "0x5-0x0000000000000000000000000000000000000002")
	assert.fieldEquals("YTsell", "0x5-0x0000000000000000000000000000000000000002", "PreviousOrder", "")
	assert.fieldEquals("Orderbook", "0x0000000000000000000000000000000000000002", "AvailableYTsells", "3")
})

test("modify zcb sell", () => {
	let newZCBSellEvent = newZCBSell(
		"0x0000000000000000000000000000000000000003",
		"0x0000000000000000000000000000000000000002",
		0,
		7,
		2,
		3
	)
	handleLimitSellZCB(newZCBSellEvent)
	assert.fieldEquals("ZCBsell", "0x7-0x0000000000000000000000000000000000000002", "id", "0x7-0x0000000000000000000000000000000000000002")
	assert.fieldEquals("ZCBsell", "0x7-0x0000000000000000000000000000000000000002", "Amount", "2")
	assert.fieldEquals("ZCBsell", "0x7-0x0000000000000000000000000000000000000002", "PreviousOrder", "")
	assert.fieldEquals("ZCBsell", "0x7-0x0000000000000000000000000000000000000002", "NextOrder", "0x5-0x0000000000000000000000000000000000000002")
	assert.fieldEquals("ZCBsell", "0x7-0x0000000000000000000000000000000000000002", "MaturityConversionRate", "3")
	assert.fieldEquals("Orderbook", "0x0000000000000000000000000000000000000002", "LockedZCB", "10")
	let newModifyOrderEvent = newModifyOrder(
		"0x0000000000000000000000000000000000000002",
		7,
		1
	)
	handleModification(newModifyOrderEvent)
	assert.fieldEquals("ZCBsell", "0x7-0x0000000000000000000000000000000000000002", "Amount", "3")
	assert.fieldEquals("Orderbook", "0x0000000000000000000000000000000000000002", "LockedZCB", "11")
	let newNewModifyOrderEvent = newModifyOrder(
		"0x0000000000000000000000000000000000000002",
		7,
		-2
	)
	handleModification(newNewModifyOrderEvent)
	assert.fieldEquals("ZCBsell", "0x7-0x0000000000000000000000000000000000000002", "Amount", "1")
	assert.fieldEquals("Orderbook", "0x0000000000000000000000000000000000000002", "LockedZCB", "9")
})

test("modify yt sell", () => {
	let newYTSellEvent = newYTSell(
		"0x0000000000000000000000000000000000000003",
		"0x0000000000000000000000000000000000000002",
		0,
		8,
		2,
		3
	)
	handleLimitSellYT(newYTSellEvent)
	assert.fieldEquals("YTsell", "0x8-0x0000000000000000000000000000000000000002", "id", "0x8-0x0000000000000000000000000000000000000002")
	assert.fieldEquals("YTsell", "0x8-0x0000000000000000000000000000000000000002", "Amount", "2")
	assert.fieldEquals("YTsell", "0x8-0x0000000000000000000000000000000000000002", "PreviousOrder", "")
	assert.fieldEquals("YTsell", "0x8-0x0000000000000000000000000000000000000002", "NextOrder", "0x5-0x0000000000000000000000000000000000000002")
	assert.fieldEquals("YTsell", "0x8-0x0000000000000000000000000000000000000002", "MaturityConversionRate", "3")
	assert.fieldEquals("Orderbook", "0x0000000000000000000000000000000000000002", "LockedYT", "10")
	let newModifyOrderEvent = newModifyOrder(
		"0x0000000000000000000000000000000000000002",
		8,
		1
	)
	handleModification(newModifyOrderEvent)
	assert.fieldEquals("YTsell", "0x8-0x0000000000000000000000000000000000000002", "Amount", "3")
	assert.fieldEquals("Orderbook", "0x0000000000000000000000000000000000000002", "LockedYT", "11")
	let newNewModifyOrderEvent = newModifyOrder(
		"0x0000000000000000000000000000000000000002",
		8,
		-2
	)
	handleModification(newNewModifyOrderEvent)
	assert.fieldEquals("YTsell", "0x8-0x0000000000000000000000000000000000000002", "Amount", "1")
	assert.fieldEquals("Orderbook", "0x0000000000000000000000000000000000000002", "LockedZCB", "9")
	logStore()
})